{% extends 'base.html.twig' %}

{% block title %}
    {{ title }}
{% endblock %}

{% block body %}
    {{ form_start(form) }}

    <div class="portlet box green">
        <div class="portlet-title">
            <div class="caption">
                <i class="fa fa-gift"></i>Compose your measure
            </div>

            <div class="actions">
                {{ form_widget(form.isShared) }}
            </div>

        </div>
        <div id="measure-form" class="portlet-body">
            {% set indexItemNumber = (numberOfItems is defined) ? numberOfItems - 1 : - 1 %}

            {{ form_row(form.name) }}
            {{ form_row(form.description) }}

            <div class="items"
                 data-index-item="{{ indexItemNumber }}"
                 data-prototype-choice="{{ form_widget(form.choiceItems.vars.prototype)|e('html_attr') }}"
                 data-prototype-direct-observation="{{ form_widget(form.directObservationItems.vars.prototype)|e('html_attr') }}"
                 data-prototype-integer="{{ form_widget(form.integerItems.vars.prototype)|e('html_attr') }}"
                 data-prototype-meter="{{ form_widget(form.meterItems.vars.prototype)|e('html_attr') }}"
                 data-prototype-range="{{ form_widget(form.rangeItems.vars.prototype)|e('html_attr') }}"
                 data-prototype-text="{{ form_widget(form.textItems.vars.prototype)|e('html_attr') }}">
            </div>

            <div class="form-actions">
                <div class="row">
                    <div class="col-md-offset-3 col-md-9">
                        <a class="btn btn-circle green" href="javascript:;" data-toggle="dropdown" aria-expanded="false">
                            <i class="fa fa-plus"></i> Add item
                            <i class="fa fa-angle-down"></i>
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-dot-circle-o"></i>Choice</a>
                            </li>
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-dot-circle-o"></i>Direct Observation</a>
                            </li>
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-superscript"></i>Integer</a>
                            </li>
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-th"></i>Meter</a>
                            </li>
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-dot-circle-o"></i>Range</a>
                            </li>
                            <li>
                                <a href="javascript:;">
                                    <i class="fa fa-dot-circle-o"></i>Text</a>
                            </li>
                        </ul>

                        {{ form_widget(form.submit, {'class': 'btn btn-circle green'}) }}
                        <button type="button" class="btn btn-circle grey-salsa btn-outline">Cancel</button>
                        {{ form_row(form._token) }}

                    </div>
                </div>
            </div>
            {{ form_end(form, {'render_rest': false}) }}
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('theme/assets/global/plugins/bootstrap-tagsinput/bootstrap-tagsinput.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script src="{{ asset('theme/assets/global/plugins/bootstrap-tagsinput/bootstrap-tagsinput.min.js') }}"></script>

    <script>
        var $collectionHolder = $('div.items');

        $( document ).ready(function() {
            $("#measure_isShared").bootstrapSwitch('state', false);
            $("#measure_isShared").bootstrapSwitch('size', 'small');
        });

        $("#measure_isShared").bootstrapSwitch('onSwitchChange', function() {
            if($("#measure_isShared").bootstrapSwitch('state')) {
                $("#measure_isShared").val(1);
            } else {
                $("#measure_isShared").val(0);
            }

        });

        $(".portlet-body").on('change', "select[id*='type']", function(){
            isExpandedElementId = $(this).attr('id').replace('type', 'isExpanded');
            isMultipleElementId = $(this).attr('id').replace('type', 'isMultiple');

            switch($(this).val()) {
                //checkboxes
                case '0':
                    $('#' + isExpandedElementId).val(1);
                    $('#' + isMultipleElementId).val(1);
                break;

                //dropdown
                case '1':
                    $('#' + isExpandedElementId).val(0);
                    $('#' + isMultipleElementId).val(0);
                break;

                //dropdown multiple
                case '2':
                    $('#' + isExpandedElementId).val(0);
                    $('#' + isMultipleElementId).val(1);
                break;

                //radio
                case '3':
                    $('#' + isExpandedElementId).val(1);
                    $('#' + isMultipleElementId).val(0);
                break;
            }
        });

        $(".portlet-body").on('change', "select[id*='typology']", function(){
            intervalLengthInSecondsId = $(this).attr('id').replace('typology', 'intervalLengthInSeconds');

            switch($(this).val()) {
                case 'duration':
                case 'frequency':
                    $('#' + intervalLengthInSecondsId).parent().parent().hide();

                        console.log($('#' + intervalLengthInSecondsId));
                    break;

                case 'whole-interval':
                case 'partial-interval':
                case 'momentary-time-sampling':
                    $('#' + intervalLengthInSecondsId).parent().parent().show();
                    console.log($('#' + intervalLengthInSecondsId));
                    break;
            }
        });

        $( '.dropdown-menu a' ).on('click', function(e){
            e.preventDefault();

            switch($.trim($( this ).text())) {
                case 'Choice':
                    addItemForm('choice');
                    break;

                case 'Direct Observation':
                    addItemForm('direct-observation');
                    break;

                case 'Integer':
                    addItemForm('integer');
                    break;

                case 'Meter':
                    addItemForm('meter');
                    break;

                case 'Range':
                    addItemForm('range');
                    break;

                case 'Text':
                    addItemForm('text');
            }
        });

        function addItemForm(type) {
            prototype = $collectionHolder.data('prototype-' + type);
            index = $collectionHolder.attr('data-index-item');
            newIndex = parseInt(index) + 1;
            newItemNumber = newIndex + 1;

            newForm = prototype.replace(/__name__/g, newIndex);

            portlet = '<div class="portlet"><div class="portlet-title"><div class="tools"><a href="javascript:;" class="collapse" data-original-title="" title=""> </a><a href="javascript:;" class="remove" data-original-title="" title=""> </a></div></div><div class="portlet-body">' + newForm + '</div></div>';

            $collectionHolder.append(portlet);

            $( "input[name*='positionNumber']" ).last().val(newItemNumber);

            $collectionHolder.attr('data-index-item', newIndex);

            //se choice
            $ ('input[id*="options"]').tagsinput('refresh');

            //se direct
            $('input[id*=intervalLengthInSeconds]').parent().parent().hide();
        }

        function resetPositionNumbers()
        {
            $( "input[id*='positionNumber']" ).each(function( key, value ){

                positionNumber = parseInt(key) + 1;

                $ ( this ).val(positionNumber);

            });
        }

    </script>
{% endblock %}